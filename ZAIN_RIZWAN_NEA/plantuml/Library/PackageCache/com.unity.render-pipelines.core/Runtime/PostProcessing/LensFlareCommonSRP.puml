@startuml
class LensFlareCommonSRP <<sealed>> {
    + {static} maxLensFlareWithOcclusion : int = 128
    + {static} maxLensFlareWithOcclusionTemporalSample : int = 8
    + {static} mergeNeeded : int = 1
    {static} + IsOcclusionRTCompatible() : bool
    {static} + Initialize() : void
    {static} + Dispose() : void
    + IsEmpty() : bool
    + AddData(newData:LensFlareComponentSRP) : void
    + RemoveData(data:LensFlareComponentSRP) : void
    {static} + ShapeAttenuationPointLight() : float
    {static} + ShapeAttenuationDirLight(forward:Vector3, wo:Vector3) : float
    {static} + ShapeAttenuationSpotConeLight(forward:Vector3, wo:Vector3, spotAngle:float, innerSpotPercent01:float) : float
    {static} + ShapeAttenuationSpotBoxLight(forward:Vector3, wo:Vector3) : float
    {static} + ShapeAttenuationSpotPyramidLight(forward:Vector3, wo:Vector3) : float
    {static} + ShapeAttenuationAreaTubeLight(lightPositionWS:Vector3, lightSide:Vector3, lightWidth:float, cam:Camera) : float
    {static} + ShapeAttenuationAreaRectangleLight(forward:Vector3, wo:Vector3) : float
    {static} + ShapeAttenuationAreaDiscLight(forward:Vector3, wo:Vector3) : float
    {static} + GetFlareData0(screenPos:Vector2, translationScale:Vector2, rayOff0:Vector2, vLocalScreenRatio:Vector2, angleDeg:float, position:float, angularOffset:float, positionOffset:Vector2, autoRotate:bool) : Vector4
    {static} + IsCloudLayerOpacityNeeded(cam:Camera) : bool
    {static} + ComputeOcclusion(lensFlareShader:Material, cam:Camera, xr:XRPass, xrIndex:int, actualWidth:float, actualHeight:float, usePanini:bool, paniniDistance:float, paniniCropToFit:float, isCameraRelative:bool, cameraPositionWS:Vector3, viewProjMatrix:Matrix4x4, cmd:UnsafeCommandBuffer, taaEnabled:bool, hasCloudLayer:bool, cloudOpacityTexture:Texture, sunOcclusionTexture:Texture, _FlareOcclusionTex:int, _FlareCloudOpacity:int, _FlareOcclusionIndex:int, _FlareTex:int, _FlareColorValue:int, _FlareSunOcclusionTex:int, _FlareData0:int, _FlareData1:int, _FlareData2:int, _FlareData3:int, _FlareData4:int) : void
    {static} + ComputeOcclusion(lensFlareShader:Material, cam:Camera, xr:XRPass, xrIndex:int, actualWidth:float, actualHeight:float, usePanini:bool, paniniDistance:float, paniniCropToFit:float, isCameraRelative:bool, cameraPositionWS:Vector3, viewProjMatrix:Matrix4x4, cmd:UnsafeCommandBuffer, taaEnabled:bool, hasCloudLayer:bool, cloudOpacityTexture:Texture, sunOcclusionTexture:Texture) : void
    {static} + ComputeOcclusion(lensFlareShader:Material, cam:Camera, xr:XRPass, xrIndex:int, actualWidth:float, actualHeight:float, usePanini:bool, paniniDistance:float, paniniCropToFit:float, isCameraRelative:bool, cameraPositionWS:Vector3, viewProjMatrix:Matrix4x4, cmd:Rendering.CommandBuffer, taaEnabled:bool, hasCloudLayer:bool, cloudOpacityTexture:Texture, sunOcclusionTexture:Texture, _FlareOcclusionTex:int, _FlareCloudOpacity:int, _FlareOcclusionIndex:int, _FlareTex:int, _FlareColorValue:int, _FlareSunOcclusionTex:int, _FlareData0:int, _FlareData1:int, _FlareData2:int, _FlareData3:int, _FlareData4:int) : void
    {static} + ComputeOcclusion(lensFlareShader:Material, cam:Camera, xr:XRPass, xrIndex:int, actualWidth:float, actualHeight:float, usePanini:bool, paniniDistance:float, paniniCropToFit:float, isCameraRelative:bool, cameraPositionWS:Vector3, viewProjMatrix:Matrix4x4, cmd:Rendering.CommandBuffer, taaEnabled:bool, hasCloudLayer:bool, cloudOpacityTexture:Texture, sunOcclusionTexture:Texture) : void
    + {static} ProcessLensFlareSRPElementsSingle(element:LensFlareDataElementSRP, cmd:Rendering.CommandBuffer, globalColorModulation:Color, light:Light, compIntensity:float, scale:float, lensFlareShader:Material, screenPos:Vector2, compAllowOffScreen:bool, vScreenRatio:Vector2, flareData1:Vector4, preview:bool, depth:int) : void
    {static} + DoLensFlareDataDrivenCommon(lensFlareShader:Material, cam:Camera, viewport:Rect, xr:XRPass, xrIndex:int, actualWidth:float, actualHeight:float, usePanini:bool, paniniDistance:float, paniniCropToFit:float, isCameraRelative:bool, cameraPositionWS:Vector3, viewProjMatrix:Matrix4x4, cmd:UnsafeCommandBuffer, taaEnabled:bool, hasCloudLayer:bool, cloudOpacityTexture:Texture, sunOcclusionTexture:Texture, colorBuffer:Rendering.RenderTargetIdentifier, GetLensFlareLightAttenuation:System.Func<Light, Camera, Vector3, float>, _FlareOcclusionRemapTex:int, _FlareOcclusionTex:int, _FlareOcclusionIndex:int, _FlareCloudOpacity:int, _FlareSunOcclusionTex:int, _FlareTex:int, _FlareColorValue:int, _FlareData0:int, _FlareData1:int, _FlareData2:int, _FlareData3:int, _FlareData4:int, debugView:bool) : void
    {static} + DoLensFlareDataDrivenCommon(lensFlareShader:Material, cam:Camera, viewport:Rect, xr:XRPass, xrIndex:int, actualWidth:float, actualHeight:float, usePanini:bool, paniniDistance:float, paniniCropToFit:float, isCameraRelative:bool, cameraPositionWS:Vector3, viewProjMatrix:Matrix4x4, cmd:UnsafeCommandBuffer, taaEnabled:bool, hasCloudLayer:bool, cloudOpacityTexture:Texture, sunOcclusionTexture:Texture, colorBuffer:Rendering.RenderTargetIdentifier, GetLensFlareLightAttenuation:System.Func<Light, Camera, Vector3, float>, debugView:bool) : void
    {static} + DoLensFlareDataDrivenCommon(lensFlareShader:Material, cam:Camera, viewport:Rect, xr:XRPass, xrIndex:int, actualWidth:float, actualHeight:float, usePanini:bool, paniniDistance:float, paniniCropToFit:float, isCameraRelative:bool, cameraPositionWS:Vector3, viewProjMatrix:Matrix4x4, cmd:Rendering.CommandBuffer, taaEnabled:bool, hasCloudLayer:bool, cloudOpacityTexture:Texture, sunOcclusionTexture:Texture, colorBuffer:Rendering.RenderTargetIdentifier, GetLensFlareLightAttenuation:System.Func<Light, Camera, Vector3, float>, _FlareOcclusionRemapTex:int, _FlareOcclusionTex:int, _FlareOcclusionIndex:int, _FlareCloudOpacity:int, _FlareSunOcclusionTex:int, _FlareTex:int, _FlareColorValue:int, _FlareData0:int, _FlareData1:int, _FlareData2:int, _FlareData3:int, _FlareData4:int, debugView:bool) : void
    {static} + DoLensFlareDataDrivenCommon(lensFlareShader:Material, cam:Camera, viewport:Rect, xr:XRPass, xrIndex:int, actualWidth:float, actualHeight:float, usePanini:bool, paniniDistance:float, paniniCropToFit:float, isCameraRelative:bool, cameraPositionWS:Vector3, viewProjMatrix:Matrix4x4, cmd:Rendering.CommandBuffer, taaEnabled:bool, hasCloudLayer:bool, cloudOpacityTexture:Texture, sunOcclusionTexture:Texture, colorBuffer:Rendering.RenderTargetIdentifier, GetLensFlareLightAttenuation:System.Func<Light, Camera, Vector3, float>, debugView:bool) : void
    {static} + DoLensFlareScreenSpaceCommon(lensFlareShader:Material, cam:Camera, actualWidth:float, actualHeight:float, tintColor:Color, originalBloomTexture:Texture, bloomMipTexture:Texture, spectralLut:Texture, streakTextureTmp:Texture, streakTextureTmp2:Texture, parameters1:Vector4, parameters2:Vector4, parameters3:Vector4, parameters4:Vector4, parameters5:Vector4, cmd:UnsafeCommandBuffer, result:RTHandle, debugView:bool) : void
    {static} + DoLensFlareScreenSpaceCommon(lensFlareShader:Material, cam:Camera, actualWidth:float, actualHeight:float, tintColor:Color, originalBloomTexture:Texture, bloomMipTexture:Texture, spectralLut:Texture, streakTextureTmp:Texture, streakTextureTmp2:Texture, parameters1:Vector4, parameters2:Vector4, parameters3:Vector4, parameters4:Vector4, parameters5:Vector4, cmd:Rendering.CommandBuffer, result:RTHandle, _LensFlareScreenSpaceBloomMipTexture:int, _LensFlareScreenSpaceResultTexture:int, _LensFlareScreenSpaceSpectralLut:int, _LensFlareScreenSpaceStreakTex:int, _LensFlareScreenSpaceMipLevel:int, _LensFlareScreenSpaceTintColor:int, _LensFlareScreenSpaceParams1:int, _LensFlareScreenSpaceParams2:int, _LensFlareScreenSpaceParams3:int, _LensFlareScreenSpaceParams4:int, _LensFlareScreenSpaceParams5:int, debugView:bool) : void
    {static} + DoLensFlareScreenSpaceCommon(lensFlareShader:Material, cam:Camera, actualWidth:float, actualHeight:float, tintColor:Color, originalBloomTexture:Texture, bloomMipTexture:Texture, spectralLut:Texture, streakTextureTmp:Texture, streakTextureTmp2:Texture, parameters1:Vector4, parameters2:Vector4, parameters3:Vector4, parameters4:Vector4, parameters5:Vector4, cmd:Rendering.CommandBuffer, result:RTHandle, debugView:bool) : void
}
class LensFlareCompInfo {
}
LensFlareCommonSRP o-> "occlusionRT" RTHandle
LensFlareCommonSRP --> "Instance" LensFlareCommonSRP
LensFlareCommonSRP +-- LensFlareCompInfo
@enduml
