@startuml
class HID {
    + {static} UsagePageToString(usagePage:UsagePage) : string
    + {static} UsageToString(usagePage:UsagePage, usage:int) : string
}
class HIDLayoutBuilder {
    + displayName : string
    + parentLayout : string
    + Build() : InputControlLayout
}
enum HIDReportType {
    Unknown,
    Input,
    Output,
    Feature,
}
enum HIDCollectionType {
    Physical= 0x00,
    Application= 0x01,
    Logical= 0x02,
    Report= 0x03,
    NamedArray= 0x04,
    UsageSwitch= 0x05,
    UsageModifier= 0x06,
}
enum HIDElementFlags {
    Constant= 1 << 0,
    Variable= 1 << 1,
    Relative= 1 << 2,
    Wrap= 1 << 3,
    NonLinear= 1 << 4,
    NoPreferred= 1 << 5,
    NullState= 1 << 6,
    Volatile= 1 << 7,
    BufferedBytes= 1 << 8,
}
struct HIDElementDescriptor {
    + usage : int
    + unit : int
    + unitExponent : int
    + logicalMin : int
    + logicalMax : int
    + physicalMin : int
    + physicalMax : int
    + collectionIndex : int
    + reportId : int
    + reportSizeInBits : int
    + reportOffsetInBits : int
    + usageMin : int?
    + usageMax : int?
    + hasNullState : bool <<get>>
    + hasPreferredState : bool <<get>>
    + isArray : bool <<get>>
    + isNonLinear : bool <<get>>
    + isRelative : bool <<get>>
    + isConstant : bool <<get>>
    + isWrapping : bool <<get>>
    + Is(usagePage:UsagePage, usage:int) : bool
}
struct HIDCollectionDescriptor {
    + usage : int
    + parent : int
    + childCount : int
    + firstChild : int
}
struct HIDDeviceDescriptor {
    + vendorId : int
    + productId : int
    + usage : int
    + inputReportSize : int
    + outputReportSize : int
    + featureReportSize : int
    + ToJson() : string
    + {static} FromJson(json:string) : HIDDeviceDescriptor
}
struct HIDDeviceDescriptorBuilder {
    + usage : int
    + HIDDeviceDescriptorBuilder(usagePage:UsagePage, usage:int)
    + HIDDeviceDescriptorBuilder(usage:GenericDesktop)
    + StartReport(reportType:HIDReportType, reportId:int) : HIDDeviceDescriptorBuilder
    + AddElement(usagePage:UsagePage, usage:int, sizeInBits:int) : HIDDeviceDescriptorBuilder
    + AddElement(usage:GenericDesktop, sizeInBits:int) : HIDDeviceDescriptorBuilder
    + WithPhysicalMinMax(min:int, max:int) : HIDDeviceDescriptorBuilder
    + WithLogicalMinMax(min:int, max:int) : HIDDeviceDescriptorBuilder
    + Finish() : HIDDeviceDescriptor
}
enum UsagePage {
    Undefined= 0x00,
    GenericDesktop= 0x01,
    Simulation= 0x02,
    VRControls= 0x03,
    SportControls= 0x04,
    GameControls= 0x05,
    GenericDeviceControls= 0x06,
    Keyboard= 0x07,
    LEDs= 0x08,
    Button= 0x09,
    Ordinal= 0x0A,
    Telephony= 0x0B,
    Consumer= 0x0C,
    Digitizer= 0x0D,
    PID= 0x0F,
    Unicode= 0x10,
    AlphanumericDisplay= 0x14,
    MedicalInstruments= 0x40,
    Monitor= 0x80,
    Power= 0x84,
    BarCodeScanner= 0x8C,
    MagneticStripeReader= 0x8E,
    Camera= 0x90,
    Arcade= 0x91,
    VendorDefined= 0xFF00,
}
enum GenericDesktop {
    Undefined= 0x00,
    Pointer= 0x01,
    Mouse= 0x02,
    Joystick= 0x04,
    Gamepad= 0x05,
    Keyboard= 0x06,
    Keypad= 0x07,
    MultiAxisController= 0x08,
    TabletPCControls= 0x09,
    AssistiveControl= 0x0A,
    X= 0x30,
    Y= 0x31,
    Z= 0x32,
    Rx= 0x33,
    Ry= 0x34,
    Rz= 0x35,
    Slider= 0x36,
    Dial= 0x37,
    Wheel= 0x38,
    HatSwitch= 0x39,
    CountedBuffer= 0x3A,
    ByteCount= 0x3B,
    MotionWakeup= 0x3C,
    Start= 0x3D,
    Select= 0x3E,
    Vx= 0x40,
    Vy= 0x41,
    Vz= 0x42,
    Vbrx= 0x43,
    Vbry= 0x44,
    Vbrz= 0x45,
    Vno= 0x46,
    FeatureNotification= 0x47,
    ResolutionMultiplier= 0x48,
    SystemControl= 0x80,
    SystemPowerDown= 0x81,
    SystemSleep= 0x82,
    SystemWakeUp= 0x83,
    SystemContextMenu= 0x84,
    SystemMainMenu= 0x85,
    SystemAppMenu= 0x86,
    SystemMenuHelp= 0x87,
    SystemMenuExit= 0x88,
    SystemMenuSelect= 0x89,
    SystemMenuRight= 0x8A,
    SystemMenuLeft= 0x8B,
    SystemMenuUp= 0x8C,
    SystemMenuDown= 0x8D,
    SystemColdRestart= 0x8E,
    SystemWarmRestart= 0x8F,
    DpadUp= 0x90,
    DpadDown= 0x91,
    DpadRight= 0x92,
    DpadLeft= 0x93,
    SystemDock= 0xA0,
    SystemUndock= 0xA1,
    SystemSetup= 0xA2,
    SystemBreak= 0xA3,
    SystemDebuggerBreak= 0xA4,
    ApplicationBreak= 0xA5,
    ApplicationDebuggerBreak= 0xA6,
    SystemSpeakerMute= 0xA7,
    SystemHibernate= 0xA8,
    SystemDisplayInvert= 0xB0,
    SystemDisplayInternal= 0xB1,
    SystemDisplayExternal= 0xB2,
    SystemDisplayBoth= 0xB3,
    SystemDisplayDual= 0xB4,
    SystemDisplayToggleIntExt= 0xB5,
    SystemDisplaySwapPrimarySecondary= 0xB6,
    SystemDisplayLCDAutoScale= 0xB7,
}
enum Simulation {
    Undefined= 0x00,
    FlightSimulationDevice= 0x01,
    AutomobileSimulationDevice= 0x02,
    TankSimulationDevice= 0x03,
    SpaceshipSimulationDevice= 0x04,
    SubmarineSimulationDevice= 0x05,
    SailingSimulationDevice= 0x06,
    MotorcycleSimulationDevice= 0x07,
    SportsSimulationDevice= 0x08,
    AirplaneSimulationDevice= 0x09,
    HelicopterSimulationDevice= 0x0A,
    MagicCarpetSimulationDevice= 0x0B,
    BicylcleSimulationDevice= 0x0C,
    FlightControlStick= 0x20,
    FlightStick= 0x21,
    CyclicControl= 0x22,
    CyclicTrim= 0x23,
    FlightYoke= 0x24,
    TrackControl= 0x25,
    Aileron= 0xB0,
    AileronTrim= 0xB1,
    AntiTorqueControl= 0xB2,
    AutopilotEnable= 0xB3,
    ChaffRelease= 0xB4,
    CollectiveControl= 0xB5,
    DiveBreak= 0xB6,
    ElectronicCountermeasures= 0xB7,
    Elevator= 0xB8,
    ElevatorTrim= 0xB9,
    Rudder= 0xBA,
    Throttle= 0xBB,
    FlightCommunications= 0xBC,
    FlareRelease= 0xBD,
    LandingGear= 0xBE,
    ToeBreak= 0xBF,
    Trigger= 0xC0,
    WeaponsArm= 0xC1,
    WeaponsSelect= 0xC2,
    WingFlaps= 0xC3,
    Accelerator= 0xC4,
    Brake= 0xC5,
    Clutch= 0xC6,
    Shifter= 0xC7,
    Steering= 0xC8,
    TurretDirection= 0xC9,
    BarrelElevation= 0xCA,
    DivePlane= 0xCB,
    Ballast= 0xCC,
    BicycleCrank= 0xCD,
    HandleBars= 0xCE,
    FrontBrake= 0xCF,
    RearBrake= 0xD0,
}
enum Button {
    Undefined= 0,
    Primary,
    Secondary,
    Tertiary,
}
InputDevice <|-- HID
HID --> "QueryHIDReportDescriptorDeviceCommandType" FourCC
HID --> "QueryHIDReportDescriptorSizeDeviceCommandType" FourCC
HID --> "QueryHIDParsedReportDescriptorDeviceCommandType" FourCC
HID --> "hidDescriptor" HIDDeviceDescriptor
HID +-- HIDLayoutBuilder
HIDLayoutBuilder --> "hidDescriptor" HIDDeviceDescriptor
HIDLayoutBuilder --> "deviceType" Type
HID +-- HIDReportType
HID +-- HIDCollectionType
HID +-- HIDElementFlags
HID +-- HIDElementDescriptor
HIDElementDescriptor --> "usagePage" UsagePage
HIDElementDescriptor --> "reportType" HIDReportType
HIDElementDescriptor --> "flags" HIDElementFlags
HID +-- HIDCollectionDescriptor
HIDCollectionDescriptor --> "type" HIDCollectionType
HIDCollectionDescriptor --> "usagePage" UsagePage
HID +-- HIDDeviceDescriptor
HIDDeviceDescriptor --> "usagePage" UsagePage
HID +-- HIDDeviceDescriptorBuilder
HIDDeviceDescriptorBuilder --> "usagePage" UsagePage
HID +-- UsagePage
HID +-- GenericDesktop
HID +-- Simulation
HID +-- Button
@enduml
