@startuml
class "@InGameHintsActions" <<partial>> {
    + @InGameHintsActions()
    + Dispose() : void
    + Contains(action:InputAction) : bool
    + GetEnumerator() : IEnumerator<InputAction>
    + Enable() : void
    + Disable() : void
    + FindAction(actionNameOrId:string, throwIfNotFound:bool) : InputAction
    + FindBinding(bindingMask:InputBinding, action:InputAction) : int
}
class "ReadOnlyArray`1"<T> {
}
class "IEnumerable`1"<T> {
}
struct GameplayActions {
    + GameplayActions(wrapper:@InGameHintsActions)
    + Get() : InputActionMap
    + Enable() : void
    + Disable() : void
    + enabled : bool <<get>>
    + AddCallbacks(instance:IGameplayActions) : void
    + RemoveCallbacks(instance:IGameplayActions) : void
    + SetCallbacks(instance:IGameplayActions) : void
}
interface IGameplayActions {
}
IInputActionCollection2 <|-- "@InGameHintsActions"
IDisposable <|-- "@InGameHintsActions"
"@InGameHintsActions" --> "asset" InputActionAsset
"@InGameHintsActions" --> "bindingMask" InputBinding
"@InGameHintsActions" --> "devices<InputDevice>" "ReadOnlyArray`1"
"@InGameHintsActions" --> "controlSchemes<InputControlScheme>" "ReadOnlyArray`1"
"@InGameHintsActions" --> "bindings<InputBinding>" "IEnumerable`1"
"@InGameHintsActions" --> "@Gameplay" GameplayActions
"@InGameHintsActions" --> "GamepadScheme" InputControlScheme
"@InGameHintsActions" --> "KeyboardMouseScheme" InputControlScheme
"@InGameHintsActions" +-- GameplayActions
GameplayActions --> "@Move" InputAction
GameplayActions --> "@Look" InputAction
GameplayActions --> "@PickUp" InputAction
GameplayActions --> "@Drop" InputAction
GameplayActions --> "@Throw" InputAction
"@InGameHintsActions" +-- IGameplayActions
@enduml
