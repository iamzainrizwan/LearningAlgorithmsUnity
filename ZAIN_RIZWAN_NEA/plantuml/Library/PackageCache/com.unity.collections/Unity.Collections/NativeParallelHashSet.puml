@startuml
struct "NativeParallelHashSet`1"<T> {
    + NativeParallelHashSet(capacity:int, allocator:AllocatorManager.AllocatorHandle)
    + <<readonly>> IsEmpty : bool <<get>>
    + Count() : int
    + Capacity : int <<readonly get>> <<set>>
    + <<readonly>> IsCreated : bool <<get>>
    + Dispose() : void
    + Dispose(inputDeps:JobHandle) : JobHandle
    + Clear() : void
    + Add(item:T) : bool
    + Remove(item:T) : bool
    + Contains(item:T) : bool
    + ToNativeArray(allocator:AllocatorManager.AllocatorHandle) : NativeArray<T>
    + AsParallelWriter() : ParallelWriter
    + GetEnumerator() : Enumerator
    + AsReadOnly() : ReadOnly
}
class "NativeParallelHashSetDebuggerTypeProxy`1"<T> <<sealed>> {
    + NativeParallelHashSetDebuggerTypeProxy(data:NativeParallelHashSet<T>)
}
class "IEnumerable`1"<T> {
}
class "IEquatable`1"<T> {
}
struct ParallelWriter {
    + <<readonly>> Capacity : int <<get>>
    + Add(item:T) : bool
}
struct Enumerator {
    + Dispose() : void
    + MoveNext() : bool
    + Reset() : void
}
struct ReadOnly {
    + <<readonly>> IsCreated : bool <<get>>
    + <<readonly>> IsEmpty : bool <<get>>
    + <<readonly>> Count() : int
    + <<readonly>> Capacity : int <<get>>
    + <<readonly>> Contains(item:T) : bool
    + <<readonly>> ToNativeArray(allocator:AllocatorManager.AllocatorHandle) : NativeArray<T>
    + <<readonly>> GetEnumerator() : Enumerator
}
class "List`1"<T> {
}
class "IEnumerator`1"<T> {
}
INativeDisposable <|-- "NativeParallelHashSet`1"
"IEnumerable`1" "<T>" <|-- "NativeParallelHashSet`1"
"NativeParallelHashSetDebuggerTypeProxy`1" --> "Items<T>" "List`1"
"NativeParallelHashSet`1" +-- ParallelWriter
"NativeParallelHashSet`1" +-- Enumerator
"IEnumerator`1" "<T>" <|-- Enumerator
Enumerator --> "Current" T
"NativeParallelHashSet`1" +-- ReadOnly
"IEnumerable`1" "<T>" <|-- ReadOnly
@enduml
